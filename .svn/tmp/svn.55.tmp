package kr.co.itcruit.websocket;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.TimeZone;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.co.itcruit.mapper.IAlarmMapper;
import kr.co.itcruit.vo.AccountVO;
import kr.co.itcruit.vo.AlarmVO;
import kr.co.itcruit.vo.CustomUser;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class WebSocketHandler extends TextWebSocketHandler{
	
	@Autowired
	private IAlarmMapper alarmMapper;
	
	HashMap<String, WebSocketSession> loginSessionMap = new HashMap<String, WebSocketSession>();

	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        super.afterConnectionEstablished(session);

        CustomUser user = (CustomUser) session.getAttributes().get("user");
        if (user != null) {
            AccountVO av = user.getAccount();
            String accountId = av.getAccountId();

            if (accountId != null) {
                loginSessionMap.put(accountId, session);
                log.info("들어와라 참깨 : " + accountId);
            }else {
            	log.error("참깨 실패");
            }
        }
    }
	

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		super.afterConnectionClosed(session, status);
		loginSessionMap.values().remove(session);
		log.info("꺼져라 참깨 : " + session.getId());
	}
	
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        super.handleTextMessage(session, message);
        	
        String payload = message.getPayload();
        log.info("############### payload : " + payload);
        JSONObject jsonMessage = new JSONObject(payload);
        
        String category = jsonMessage.getString("type");
        
        if(category.equals("passStatus")) {
        	
        	boolean isPass = jsonMessage.getBoolean("isPass");
        	String rcvrId = jsonMessage.getString("rcvrId");
        	String sndrId = jsonMessage.getString("sndrId");
        	String recruitTtl = jsonMessage.getString("recruitTtl");
        	String alramTime = (String) jsonMessage.get("alramtime");
        	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        	sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        	Date parseAlarmTime = sdf.parse(alramTime);
        	String alarmCn = "채용공고 결과를 확인해주세요";
        	
//        	log.info("######### isPass : " +  isPass);
//        	log.info("######### rcvrId : " +  rcvrId);
//        	log.info("######### sndrId : " +  sndrId);
//        	log.info("######### recruitTtl : " +  recruitTtl);
//        	log.info("######### sndrId : " +  sndrId);
//        	log.info("######### parseAlarmTime : " +  parseAlarmTime);
//        	log.info("######### alarmCn : " +  alarmCn);
        	
//        	AlarmVO avo = new AlarmVO(rcvrId, sndrId, alarmCn, parseAlarmTime, category, recruitTtl, isPass);
//        	ObjectMapper mapper = new ObjectMapper();
//        	String json = mapper.writeValueAsString(avo);
//
//        	Iterator<Map.Entry<String, WebSocketSession>> iterator = loginSessionMap.entrySet().iterator();
//
//        	while (iterator.hasNext()) {
//        		
//        	    Map.Entry<String, WebSocketSession> entry = iterator.next();
//        	    String sessionId = entry.getKey();
//        	    WebSocketSession targetSession = entry.getValue();
//        	    
//        	    if (rcvrId.equals(sessionId)) {
//        	        if (targetSession != null && targetSession.isOpen()) {
//        	            targetSession.sendMessage(new TextMessage(json));
//        	            log.info("참깨를 받아라: " + json);
//        	        } else {
//        	            log.error("거절하는 참깨인");
//        	        }
//        	        break;
//        	    }
//        	}
//
//        	if (!iterator.hasNext()) {
//        	    log.error("없는 참깨인");
//        	}

        	
        }
        
        
//        if (payload.contains("passStatus")) {
//            JSONObject jsonMessage = new JSONObject(payload);
//            boolean isPass = jsonMessage.getBoolean("isPass");
//            String id = jsonMessage.getString("id");
//
//            WebSocketSession targetSession = loginSessionMap.get(id);
//            if (targetSession != null && targetSession.isOpen()) {
//                targetSession.sendMessage(new TextMessage("합격 여부: " + (isPass ? "합격" : "불합격")));
//            } else {
//                System.out.println("못찾겠다 참깨");
//            }
//        }
    }

	
}
