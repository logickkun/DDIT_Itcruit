package kr.co.itcruit.main.controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.co.itcruit.main.service.IRecruitListService;
import kr.co.itcruit.vo.CalendarVO;
import kr.co.itcruit.vo.RecruitVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/recruit")
public class RecruitListController {
	
	@Inject
	private IRecruitListService recruitService;

//	@Inject
//	private IEnterpriseInfoService entInfoService;
	
//	사이트에서 보여줄 전체 채용 리스트 달력 형식으로 보여주기(fullcalendar api)
//	목록 클릭시 해당 채용 정보 띄우기
//	각종 조건별로 검색 가능하도록
//	좌측에 확인한 공고 목록 따라다니게
//	우측에 채팅방 목록(후순위)
//	
//	2~3개 기업 비교해주는 페이지로 이동
//	

	/**
	 * 전체 채용리스트 달력 초기화
	 * @param model
	 * @return 
	 */
	@RequestMapping(value="/list.do", method = RequestMethod.GET)
	public String recuritList(
			Model model
			) {
		
		LocalDate now = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM");
        String time = now.format(formatter);
		time = time+"%";
        
		String recruitJson = recruitService.getRecruitList(time);
		
		
		//직무, 지역, 언어, 지역상세, 채용기간
		
		
		log.info("recruitJson() >>>>>>>>>>>>>>>>>>>>>>" + recruitJson);
		model.addAttribute("eventSources", recruitJson);
		return "main/recruit";
	}
	
	
	
	
	
	/**
	 * 달력을 새로 그리기 위한 컨트롤러
	 * @param date
	 * @return
	 */
	@RequestMapping(value="/list.do", method = RequestMethod.POST, produces = "application/json;charset=UTF-8")
	public ResponseEntity<String> recruitListChange(
			@RequestBody RecruitVO data
		) {
		
		String time = data.getTime();
		String entNm = data.getEntNm();
		
 		log.info(">>>>>>>>>>>>>>>>>>" + time);
		log.info(">>>>>>>>>>>>>>>>>>" + entNm);
		
		String recruitJson = recruitService.getRecruitList(time);
		
		
		log.info(">>>>>>>>>>>>>>>" + recruitJson);
		return new ResponseEntity<String>(recruitJson, HttpStatus.OK);
	}

	
	
	@RequestMapping(value="/getModal.do", method=RequestMethod.POST, produces = "application/json;charset=UTF-8")
	public ResponseEntity<List<RecruitVO>> modal(
			@RequestBody  Map<String, Object> dataMap
			) {
		
		log.info("modal >>>>>>>>>>>>>>>>>>>>>>>>>오긴 하나>??????????????" + dataMap);
		
		String recruitNo = (String) dataMap.get("recruitNo");
		
		List<RecruitVO> result = recruitService.selectListByRecruitNo(recruitNo);
				
		log.info(">>>>>>>>>>>>" + result);
        return new ResponseEntity<List<RecruitVO>>(result, HttpStatus.OK);
    }
	
}
