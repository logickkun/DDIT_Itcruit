package kr.co.itcruit.main.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.co.itcruit.account.service.IEnterpriseAccountService;
import kr.co.itcruit.atch.service.IAtchFileService;
import kr.co.itcruit.board.service.IEnterpriseNoticeBoardService;
import kr.co.itcruit.enterprise.info.service.IEnterpriseInfoService;
import kr.co.itcruit.enterprise.like.service.ILikeService;
import kr.co.itcruit.main.service.IRecruitListService;
import kr.co.itcruit.recruit.service.IRecruitService;
import kr.co.itcruit.vo.AccountVO;
import kr.co.itcruit.vo.AtchFileVO;
import kr.co.itcruit.vo.BoardVO;
import kr.co.itcruit.vo.CustomUser;
import kr.co.itcruit.vo.EnterpriseVO;
import kr.co.itcruit.vo.PaginationInfoVO;
import kr.co.itcruit.vo.RecruitVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/main")
public class MainController {
	//메인페이지에서 배보여질 배너와 채용정보카드 리스트들 
	//해당 카드를 눌렀을 때 창 띄우기
	//로그인버튼 눌렀을 때 로그인 페이지로 이동
	//배너 눌렀을 때 또한 카드 눌렀을 때 처럼 이벤트(해당 기업 채용정보페이지 띄우기 같은)
	//카드나 배너 3~5회 클릭 이벤트 발생 후 로그인페이지 유도
	//비회원일 경우 회원가입 유도
	//헤더에 있는 버튼 클릭시 이동할 페이지 설정 -기능구현x(페이지 주소나 매핑 주소만)
	//특정이벤트의 경우 반드시 권한이 필요하기 때문에 권한 체크후 이벤트 발생
	
	@Inject
	private IRecruitListService recruitService;
	
	@Inject
	private IRecruitService recruitSer;
	
	@Inject
	private IEnterpriseInfoService enterpriseService;
	
	@Inject
	private ILikeService likeService;
	
	@Inject
	private IAtchFileService atchFileService;
	
	@Inject
	private IEnterpriseNoticeBoardService enterpriseNoticeService;
	
	
	
//	@PreAuthorize("hasAnyRole('AUTH102', 'AUTH103')")
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public String index(Model model, RecruitVO recruitVO, HttpServletRequest req) {
//		log.info("reqreq = {}", req);
		
		// 메인화면 채용공고 20개씩 페이징처리해서 무한스크롤 하려고함
		PaginationInfoVO<RecruitVO> pagingVO = new PaginationInfoVO<RecruitVO>(20,5);
		pagingVO.setCurrentPage(1);
		
		List<RecruitVO> initRecruitList = recruitSer.selectInitRecruitList(pagingVO);
//		log.info("initRecruitList = {}", initRecruitList);
		
		LocalDate today = LocalDate.now();
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm");
		// 각 채용 공고의 마감일과 오늘 날짜 사이의 차이 계산하기
		for (RecruitVO recruit : initRecruitList) {
		    String recruitEndDt = recruit.getRecruitEndDt(); // 문자열로 가져옴
		    LocalDate EndDt = LocalDate.parse(recruitEndDt, formatter); // LocalDate로 변환
		    long dday = ChronoUnit.DAYS.between(today, EndDt); // 날짜 차이 계산
		    System.out.println("recruitEndDt - today = " + dday);
		    if(dday < 0) {
		    	recruit.setRecruitEndDt(String.valueOf("공고마감"));
		    }else {
		    	recruit.setRecruitEndDt(String.valueOf("D-"+dday));
		    }
		}
		
		model.addAttribute("initRecruitList", initRecruitList);
		
		return "main/main";
	}
	
	
	// 로그인 폼
	@RequestMapping(value = "/loginForm.do", method = RequestMethod.GET)
	public String loginForm() {
		return "conn/loginForm";
	}
	
	// 회원가입 폼
	@RequestMapping(value = "/registerForm.do", method = RequestMethod.GET)
	public String registerForm() {
		return "conn/registerForm";
	}
	
	// 아이디/비밀번호찾기 폼
	@RequestMapping(value = "/idpwfindForm.do", method = RequestMethod.GET)
	public String idpwfindForm() {
		return "conn/idpwFind";
	}
	
	// 관리자로그인 폼
	@RequestMapping(value = "/adminLoginForm.do", method = RequestMethod.GET)
	public String adminLoginForm() {
		return "conn/adminLoginForm";
	}
	
	// 채용정보 상세페이지
	@RequestMapping(value = "/recuritInfo.do", method = RequestMethod.GET)
	public String recuritInfo() {
		return "conn/recuritInfo";
	}
	
	// 자소서 폼(채용공고 신청했을때)
	@RequestMapping(value = "/introForm.do", method = RequestMethod.GET)
	public String introForm() {
		return "conn/introForm";
	}
	
	
	// 채용상세
//	@PreAuthorize("hasAnyRole('ROLE_AUTH102', 'ROLE_AUTH103')")
	@GetMapping("/recruitDetail.do")
	public String recruitDetail(String recruitNo, String pstnCmmncdNm, Model model, 
			HttpSession session, HttpServletRequest req) {
		
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    AccountVO accountVO = null;
	    
	    if (authentication != null && authentication.getPrincipal() instanceof CustomUser) {
	        CustomUser user = (CustomUser) authentication.getPrincipal();
	        accountVO = user.getAccount();
	    }
	    
//	    log.info("정보 : {}", accountVO);
//	    log.info("정보 : {}", recruitNo);
//	    log.info("정보 : {}", pstnCmmncdNm);
	    
	    String goPage = "conn/recruitInfo"; // 기본 페이지 설정
	    
	    RecruitVO recruitVO = recruitSer.recruitDetail(recruitNo, pstnCmmncdNm);
	    int entNo = recruitVO.getEntNo();
	    String accountId = (accountVO != null) ? accountVO.getAccountId() : null;
	    
	    EnterpriseVO enterprise = enterpriseService.selectEnt(entNo);
	    if (accountId != null) {
	        enterprise.setLoginId(accountId);
	        recruitVO.setAccountId(accountId);
	        
	        // 좋아요 여부 확인 및 추가 작업 수행
	        EnterpriseVO likeEnt = recruitSer.selectLikeEnt(enterprise);
	        if (likeEnt != null) {
	            model.addAttribute("likeEnt", "y");
	        }
	        RecruitVO likeRecruit = recruitSer.selectLikeRecruit(recruitVO);
	        if (likeRecruit != null) {
	            model.addAttribute("likeRecruit", "y");
	        }
	        int num = likeService.countLikeEnt(enterprise);
	        enterprise.setEntHit(num);
	    }
	    
	    // 공지기업게시판 추가
	    BoardVO boardVO = enterpriseNoticeService.selectEnterpriseNotice(entNo);
	    log.info("공지기업게시판 1개 {} ", boardVO);
	    // 공지기업게시판 댓글 조회수
	    String noticeBbsNo = boardVO.getBbsNo();
	    int noticeHit = enterpriseNoticeService.selectEntNoticeComment(noticeBbsNo);
	    boardVO.setNoticeEntCommentHit(noticeHit);
	    
	    model.addAttribute("boardNotice", boardVO);
	    
	    // 자유기업게시판 추가
	    BoardVO bVO = enterpriseNoticeService.selectEnterpriseFree(entNo);
	    log.info("자유기업게시판 1개 {} ", bVO);
	    // 자유기업게시판 댓글 조회수
	    String freeBbsNo = bVO.getBbsNo();
	    int freeHit = enterpriseNoticeService.selectEntFreeComment(freeBbsNo);
	    bVO.setFreeEntCommentHit(freeHit);
	    
	    model.addAttribute("boardFree", bVO);
	    
	    model.addAttribute("recruit", recruitVO);
	    model.addAttribute("enterprise", enterprise);
	    
	    // 페이지 반환
	    return goPage;
	}
	
	@RequestMapping(value = "/logodisplay", method = RequestMethod.GET)
	public ResponseEntity<byte[]> imgdisplay(int entNo) {
//		log.info("#####################ENTNO : " + entNo);
		
		EnterpriseVO enterpriseVO = enterpriseService.selectEnt(entNo);
		
//		log.info("#####################enterpriseVO : " + enterpriseVO);
		
		byte[] logo = enterpriseVO.getEntImg();
		
//		log.info("#####################logo : " + logo);
		
		return new ResponseEntity<byte[]>(logo, HttpStatus.OK);
	}
	
	
	@RequestMapping(value = "/fileDisplay", method = RequestMethod.GET)
	public ResponseEntity<byte[]> fileDisplay(int entNo) {
//		log.info("#####################ENTNO : " + entNo);
		
		AtchFileVO atchFileVO = atchFileService.selectFile(entNo); 
		
//		log.info("#####################enterpriseVO : " + atchFileVO);
		String filePath = atchFileVO.getFilePath();
		
		File file = new File(filePath);
		
		byte[] brnoFile = null;
		
		try {
			brnoFile = Files.readAllBytes(file.toPath());
		} catch (IOException e) {
			e.printStackTrace();
		}
		
//		log.info("#####################brnoFile : " + brnoFile);
		
		return new ResponseEntity<byte[]>(brnoFile, HttpStatus.OK);
		
	}
	
	
	// 무한스크롤 페이지 추가
	@RequestMapping(value = "/paginationInfo", method = RequestMethod.POST)
	public ResponseEntity<List<RecruitVO>> getPaginationInfo(int currentPage) {
		
	    PaginationInfoVO<RecruitVO> pagingVO = new PaginationInfoVO<RecruitVO>(20, 5);
	    pagingVO.setCurrentPage(currentPage);
//	    log.info("pagingVO {} ", pagingVO);
	    
	    List<RecruitVO> initRecruitList = recruitSer.selectInitRecruitList(pagingVO);
//		log.info("initRecruitList = {}", initRecruitList);
		
	    return new ResponseEntity<List<RecruitVO>>(initRecruitList, HttpStatus.OK);
	}
	

}
