package kr.co.itcruit.resume.service.impl;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.co.itcruit.ServiceResult;
import kr.co.itcruit.mapper.IAtchFileMapper;
import kr.co.itcruit.mapper.IResumeMapper;
import kr.co.itcruit.resume.service.IResumeService;
import kr.co.itcruit.vo.AccountVO;
import kr.co.itcruit.vo.AtchFileVO;
import kr.co.itcruit.vo.AvailLangListVO;
import kr.co.itcruit.vo.CareerVO;
import kr.co.itcruit.vo.CertificateVO;
import kr.co.itcruit.vo.EducationVO;
import kr.co.itcruit.vo.ExperienceVO;
import kr.co.itcruit.vo.PortfolioFileVO;
import kr.co.itcruit.vo.PortfolioVO;
import kr.co.itcruit.vo.PositionVO;
import kr.co.itcruit.vo.ProjectCareerVO;
import kr.co.itcruit.vo.ResumeVO;

@Service
public class ResumeServiceImpl implements IResumeService{
	
	@Inject
	private IResumeMapper resumeMapper;
	
	@Autowired
	private IAtchFileMapper fileMapper;
	
	//resume 등록하려는 회원정보 가져오기
	@Override
	public AccountVO selectMember(String accountId) {
		return resumeMapper.selectMember(accountId);
	}
	
	//resume 기술스택(사용언어) dropdown list 가져오기
	@Override
	public List<Map<String, Object>> langList(Map<String, Object> paramMap) {
		return resumeMapper.langList(paramMap);
	}

	@Override
	public List<ResumeVO> selectResume(String accountId) {
		return resumeMapper.selectResume(accountId);
	}

	//resume등록할 때 이력서번호, 회원id, 성별, 이력서제목, 신입경력여부, 연차, 이력서공개여부 작성한거 insert
	@Override
	public ServiceResult insertResume(HttpServletRequest req, ResumeVO resumeVO, AvailLangListVO availLangListVO
			, PositionVO positionVO, List<PortfolioVO> portUrlVOList, PortfolioFileVO portFileVO
			, EducationVO educationVO, List<CareerVO> careerVOList
			, List<ProjectCareerVO> projectVOList, List<CertificateVO> certificateVOList, List<ExperienceVO> experienceVOList
			, MultipartFile[] portFile) {
		
		ServiceResult result = null;
		
		int status = resumeMapper.insertResume(resumeVO);
		
		if(status > 0) { //기본정보 insert됐으면
			
			//기술스택(사용언어)
			String[] langArr = availLangListVO.getLangArr();
			
			for(String lang : langArr) {
				availLangListVO.setRsmNo(resumeVO.getRsmNo()); //이력서 번호 설정
				
				System.out.println("서비스!!!!!"+lang);
				System.out.println("rsmno!!!!!"+resumeVO.getRsmNo());
				
				//resume등록할 때 필수로 받는 기술스택(사용언어)의 공통코드 가져오기
//				String availLangCmmncd = resumeMapper.selectCommncdLang(lang);
//				System.out.println("commncdLang!!!!!" + availLangCmmncd);
//				availLangListVO.setAvailLangCmmncd(availLangCmmncd); //현재 해당하는 사용언어에 대한 공통코드 설정
				
				//resume등록할 때 필수로 받는 기술스택(사용언어) insert
				availLangListVO.setAvailLangCmmncdNm(lang);
				int langStatus = resumeMapper.insertResumeLang(availLangListVO);
				if(langStatus > 0) {
					result = ServiceResult.OK;
				}else {
					result = ServiceResult.FAILED;
					return result;
				}
			}
			
			if(resumeVO.getRsmPhotoByte() != null && resumeVO.getRsmPhotoByte().length > 0) {
				int resumePhotoStatus = insertResumePhoto(resumeVO);
				if(resumePhotoStatus > 0) {
					result = ServiceResult.OK;
				}else {
					result = ServiceResult.FAILED;
					return result;
				}
			}
			
			if(resumeVO.getRsmIntroduction() != null && resumeVO.getRsmIntroduction().length() > 0) {
				int introStatus = insertResumeIntro(resumeVO);
				if(introStatus > 0) {
					result = ServiceResult.OK;
				}else {
					result = ServiceResult.FAILED;
					return result;
				}
			}
			
			if(positionVO != null && !positionVO.equals("")) {
				int positionStatus = insertResumePosition(positionVO, resumeVO.getRsmNo());
				if(positionStatus > 0 ) {
					result = ServiceResult.OK;  //0이면 falied로
				}else {
					result = ServiceResult.FAILED;
					return result;
				}
			}
			
			if(portUrlVOList != null) {
				if(portUrlVOList.size() > 0) {
					int portStatus = insertResumePortfolio(portUrlVOList, resumeVO.getRsmNo());
					if(portStatus > 0 ) {
						result = ServiceResult.OK;
					}else {
						result = ServiceResult.FAILED;
						return result;
					}
				}
			}
			
			if(portFileVO != null && !portFileVO.equals("")) {
				int portFileStatus = insertResumePortfolioFile(portFileVO, resumeVO.getRsmNo(), portFile, req);
				if(portFileStatus > 0 ) {
					result = ServiceResult.OK;
				}else {
					result = ServiceResult.FAILED;
					return result;
				}
			}
			
			if(educationVO != null && !educationVO.equals("")) {
				int eduStatus = insertResumeEducation(educationVO, resumeVO);
				if(eduStatus > 0 ) {
					result = ServiceResult.OK;
				}else {
					result = ServiceResult.FAILED;
					return result;
				}
			}
			
			if(careerVOList != null) {
				if(careerVOList.size() > 0) {
					int careerStatus = insertResumeCareer(careerVOList, resumeVO);
					if(careerStatus > 0 ) {
						result = ServiceResult.OK;
					}else {
						result = ServiceResult.FAILED;
						return result;
					}
				}
			}
			
			if(certificateVOList != null) {
				if(certificateVOList.size() > 0) {
					int certStatus = insertResumeCertificate(certificateVOList, resumeVO.getRsmNo());
					if(certStatus > 0 ) {
						result = ServiceResult.OK;
					}else {
						result = ServiceResult.FAILED;
						return result;
					}
				}
			}
			
			if(experienceVOList != null) {
				if(experienceVOList.size() > 0) {
					int expStatus = insertResumeExperience(experienceVOList, resumeVO.getRsmNo());
					if(expStatus > 0 ) {
						result = ServiceResult.OK;
					}else {
						result = ServiceResult.FAILED;
						return result;
					}
				}
			}
			
		}else {
			result = ServiceResult.FAILED;
			return result;
		}
		
		return result;
	}

	

	//이력서 등록할 때 경험 데이터가 있으면
	private int insertResumeExperience(List<ExperienceVO> experienceVOList, String rsmNo) {
		
		int expStatus = 0;
		
		for (ExperienceVO expVO : experienceVOList) {
			
			expVO.setRsmNo(rsmNo); //이력서 번호 설정
			
			System.out.println("경험 서비스!!!!!");
			System.out.println("경험 서비스!!!!!");
			System.out.println("경험 서비스!!!!!");
			System.out.println("경험 서비스!!!!!");
			System.out.println("경험 서비스!!!!!"+expVO);
			
			//resume등록할 때 입력한 경험 insert
			expStatus = resumeMapper.insertResumeExp(expVO);
		}
		return expStatus;
	}

	//이력서 등록할 때 자격증 데이터가 있으면
	private int insertResumeCertificate(List<CertificateVO> certificateVOList, String rsmNo) {
		
		int certStatus = 0;
		
		for (CertificateVO certVO : certificateVOList) {
			
			certVO.setRsmNo(rsmNo); //이력서 번호 설정
			
			System.out.println("자격증 서비스!!!!!");
			System.out.println("자격증 서비스!!!!!");
			System.out.println("자격증 서비스!!!!!");
			System.out.println("자격증 서비스!!!!!");
			System.out.println("자격증 서비스!!!!!"+certVO);
			
			//resume등록할 때 입력한 자격증 insert
			certStatus = resumeMapper.insertResumeCert(certVO);
		}
		return certStatus;
	}

	//이력서 등록할 때 경력-프로젝트 데이터가 있으면
	private int insertResumeProject(ProjectCareerVO projectVO) {
		
		int projectStatus = 0;
		
		projectVO.setCareerNo(projectVO.getCareerNo()); //경력 번호 설정
		
		System.out.println("프로젝트 서비스!!!!!");
		System.out.println("프로젝트 서비스!!!!!");
		System.out.println("프로젝트 서비스!!!!!");
		System.out.println("프로젝트 서비스!!!!!");
		System.out.println("프로젝트 서비스!!!!!"+projectVO);
		
		//resume 등록할 때 입력한 경력-프로젝트 insert
		projectStatus = resumeMapper.insertResumeCareerProject(projectVO);
		
		return projectStatus;
	}

	//이력서 등록할 때 경력을 선택했고, 경력 데이터가 있으면, 경력 하나 당 프로젝트 데이터는 필수니까
	private int insertResumeCareer(List<CareerVO> careerVOList, ResumeVO resumeVO) {
		
		int careerStatus = 0;
		
		if(resumeVO.getRsmNewCareer() == "신입") {
			return careerStatus;
		} else {
			for(CareerVO careerVO : careerVOList) {
				System.out.println("CCCCCCCC");
				System.out.println("CCCCCCCC");
				System.out.println("CCCCCCCC");
				System.out.println("CCCCCCCC");
				System.out.println("CCCCCCCC"+careerVO);
				
				System.out.println("333333 : "+resumeVO.getRsmNo());
				
				careerVO.setRsmNo(resumeVO.getRsmNo());
				
				//resume등록할 때 경력 insert하기 전에 이미 insert된 경력인지 확인
//				int existingCareerNo = resumeMapper.checkCareerDuplicate(careerVO);
				
				//없는 careerNo면 데이터베이스에 저장
//				if (existingCareerNo == 0) {
					resumeMapper.insertResumeCareer(careerVO);
					
					//경력 입력 할 때 무조건 프로젝트 한 개는 필수
					if(careerVO.getProjectData() != null) {
						
						List<ProjectCareerVO> projectVOList = careerVO.getProjectData();
						
						for(ProjectCareerVO projectVO : projectVOList) {
							
							System.out.println("nnnnnnnnnnnnn");
							System.out.println("nnnnnnnnnnnnn");
							System.out.println("nnnnnnnnnnnnn");
							System.out.println("nnnnnnnnnnnnn");
							System.out.println(careerVO);
							System.out.println(careerVO.getCareerNo());
							
							projectVO.setCareerNo(careerVO.getCareerNo());
							
							int projectStatus = insertResumeProject(projectVO);
							if(projectStatus > 0 ) {
								careerStatus = projectStatus;
							}else {
								return careerStatus;
							}
						}
					}
//				}
			}
		}
		return careerStatus;
	}
	

	//이력서 등록할 때 최종학력 데이터가 있으면
	private int insertResumeEducation(EducationVO educationVO, ResumeVO resumeVO) {
		
		int eduStatus = 0;
		
		resumeVO.setEduEnd(educationVO.getEduEnd());
		resumeVO.setEduAcdmcr(educationVO.getEduAcdmcr());
		resumeVO.setEduNm(educationVO.getEduNm());
		resumeVO.setRsmMjrNm(educationVO.getRsmMjrNm());
		resumeVO.setGrade(educationVO.getGrade());
		resumeVO.setRsmNo(resumeVO.getRsmNo());
		
		System.out.println("학력 서비스!!!!!");
		System.out.println("학력 서비스!!!!!");
		System.out.println("학력 서비스!!!!!");
		System.out.println("학력 서비스!!!!!");
		System.out.println("학력 서비스!!!!!"+resumeVO);
		
		//resume등록할 때 입력한 최종학력 insert
		eduStatus = resumeMapper.insertResumeEducation(resumeVO);
		
		return eduStatus;
	}

	//이력서 등록할 때 포트폴리오 파일 데이터가 있으면
	private int insertResumePortfolioFile(PortfolioFileVO portFileVO, String rsmNo, MultipartFile[] portFile, HttpServletRequest req) {
		
		int portFileStatus = 0;
			
		System.out.println("ㅍㅍㅍㅍㅍㅍㅍ");
		System.out.println("ㅍㅍㅍㅍㅍㅍㅍ");
		System.out.println("ㅍㅍㅍㅍㅍㅍㅍ");
		System.out.println("ㅍㅍㅍㅍㅍㅍㅍ");
		System.out.println("ㅍㅍㅍㅍㅍㅍㅍ"+portFileVO);
		
		portFileVO.setRsmNo(rsmNo); //이력서 번호 설정
		
		List<String> portFileTtlList = portFileVO.getPortFileTtlList();
		
		if (portFileTtlList != null) {
			if(portFileTtlList.size() > 0) {
				
				for (String portFileTtl : portFileTtlList) {
					
					System.out.println("파일제목");
					System.out.println("파일제목");
					System.out.println("파일제목");
					System.out.println("파일제목");
					System.out.println("파일제목");
					System.out.println("포트폴리오 파일제목!!!!!"+portFileTtl);
					
					portFileVO.setPortFileTtl(portFileTtl); //포트폴리오 파일제목 설정
					
					//resume등록할 때 업로드한 포트폴리오 파일 이름 insert
					portFileStatus = resumeMapper.insertResumePortfolioFileTtl(portFileVO);
					
					String fileSrcNo = String.valueOf(portFileVO.getPortFileNo()); //파일번호를 보냄

					String orgnCmmncd = "이력서포트폴리오파일";
					
					try {
						
						for(MultipartFile portfolioFile : portFile) {
							
							AtchFileVO atchFileVO = new AtchFileVO(portfolioFile, req, fileSrcNo, orgnCmmncd);
							atchFileVO.setFileSrcNo(fileSrcNo);
							atchFileVO.setOrgnCmmncd(orgnCmmncd);;
							
							//resume등록할 때 업로드한 포트폴리오 파일 insert
							fileMapper.atchFileInsert(atchFileVO);
						}
						
					} catch (Exception e) {
						portFileStatus = 0;
					}	
				}
			}
		}
		return portFileStatus;
	}
	
	//이력서 등록할 때 포트폴리오 url 데이터가 있으면
	private int insertResumePortfolio(List<PortfolioVO> portfolioVOList, String rsmNo) {
		
		int portStatus = 0;
		
		for (PortfolioVO portfolioVO : portfolioVOList) {
			
			System.out.println("ㅎㅎㅎㅎㅎㅎㅎ");
			System.out.println("ㅎㅎㅎㅎㅎㅎㅎ");
			System.out.println("ㅎㅎㅎㅎㅎㅎㅎ");
			System.out.println("ㅎㅎㅎㅎㅎㅎㅎ");
			System.out.println("ㅎㅎㅎㅎㅎㅎㅎ"+portfolioVO);
			
			portfolioVO.setRsmNo(rsmNo); //이력서 번호 설정
			
			String portUrlTtl = portfolioVO.getPortUrlTtl();
			String portUrl = portfolioVO.getPortUrl();
			
			System.out.println("ggggggggggggg");
			System.out.println("ggggggggggggg");
			System.out.println("ggggggggggggg");
			System.out.println("ggggggggggggg");
			System.out.println("ggggggggggggg");
			System.out.println("포트폴리오 url제목"+portUrlTtl);
			System.out.println("포트폴리오 url"+portUrl);
			
			portStatus = resumeMapper.insertResumePortfolioUrl(portfolioVO);
			
		}
		return portStatus;
	}

	//이력서 등록할 때 개발직무 데이터가 있으면
	private int insertResumePosition(PositionVO positionVO, String rsmNo) {
		
		int positionStatus = 0;
		
		String[] pstnArr = positionVO.getPstnArr();
		
		for (String position : pstnArr) {
			
			positionVO.setRsmNo(rsmNo); //이력서 번호 설정
			
			if (position != null) {
				System.out.println("포지션 서비스!!!!!");
				System.out.println("포지션 서비스!!!!!");
				System.out.println("포지션 서비스!!!!!");
				System.out.println("포지션 서비스!!!!!");
				System.out.println("포지션 서비스!!!!!"+position);
				
				//resume등록할 때 입력한 개발직무의 공통코드 가져오기
//				String pstnCmmncd = resumeMapper.selectCommncdPosition(position);
//				System.out.println("pstnCmmncd!!!!!" + pstnCmmncd);
//				positionVO.setPstnCmmncd(pstnCmmncd); //현재 해당하는 개발직무에 대한 공통코드 설정
				
				positionVO.setPstnCmmncdNm(position);
				
				//resume등록할 때 입력한 개발직무 insert
				positionStatus = resumeMapper.insertResumePosition(positionVO);
			}
		}
		return positionStatus;
	}
	
	//이력서 등록할 때 간단소개 있으면
	private int insertResumeIntro(ResumeVO resumeVO) {
		
		resumeVO.setRsmNo(resumeVO.getRsmNo());
		
		int introStatus = resumeMapper.insertResumeIntro(resumeVO);
		
		return introStatus;
	}

	//이력서 등록할 때 프로필 사진이 있으면
	private int insertResumePhoto(ResumeVO resumeVO) {
		
		resumeVO.setRsmNo(resumeVO.getRsmNo());
		
		int resumePhotoStatus = resumeMapper.insertResumePhoto(resumeVO);
		
		return resumePhotoStatus;
	}

	// 이력서 확인
	public List<ResumeVO> checkResume(String accountId) {
		return resumeMapper.checkResume(accountId);
	}

	
	//회원마이페이지에서 본인 이력서 제목 클릭 후 확인하려고 할 때. rsmNo로 모든 정보를 불러옴
	@Override
	public List<ResumeVO> selectExistingResume(String rsmNo) {
		
		List<ResumeVO> existingResumeVO = resumeMapper.selectExistingResume(rsmNo);
		System.out.println("eeeeeeee");
		System.out.println(existingResumeVO);
		return existingResumeVO;
	}

}
