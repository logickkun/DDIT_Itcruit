package kr.co.itcruit.account.controller;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.co.itcruit.ServiceResult;
import kr.co.itcruit.account.service.IEnterpriseAccountService;
import kr.co.itcruit.vo.AccountVO;
import kr.co.itcruit.vo.EnterpriseVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/account/enterprise")
@Slf4j
public class EnterpriseAccountController {

	@Inject
	private IEnterpriseAccountService entAccountService;

	// 회원가입
	@RequestMapping(value = "/signup.do", method = RequestMethod.POST)
	public String memberSignup(HttpServletRequest req, Model model, 
			AccountVO accountVo, EnterpriseVO enterpriseVO, RedirectAttributes ra, @RequestParam("entLogoImg") MultipartFile entLogoImg) {
		
		log.info("##########" + enterpriseVO);
		log.info("##########" + entLogoImg);
		
		try {
			byte[] castFile = entLogoImg.getBytes();
			
			enterpriseVO.setEntImg(castFile);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		log.info("##########" + enterpriseVO);
		
		/*
		 * 
		 * @RequestMapping(value="/ImgScreen.do" get)
		 * ResponsEntity<byte[]> img(int entNo) {
		 * 
		 * 		이미지를 뿌려주는 코드
		 * 		
		 * 		Vo vo = service.selectOne(entNo);
		 * 		byte[] logo = vo.getEntImg ===> byte[]
		 * 
		 * 		return ResponsEntity<byte[]>(logo, HtttpStatus.OK)
		 * }
		 * 
		 */
		
		
		System.out.println(accountVo);
		System.out.println(enterpriseVO);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("accountVO", accountVo);
		map.put("enterpriseVO", enterpriseVO);
		
		
		System.out.println("AccountVOAccountVOAccountVO " + map.get("accountVO"));
		System.out.println("EnterpriseVOEnterpriseVOEnterpriseVO " + map.get("enterpriseVO"));
		
		String entNm = (String) map.get(enterpriseVO.getEntNm());
		String accountId = (String) map.get(accountVo.getAccountId());
		
		String goPage = "";
		
		Map<String, String> errors = new HashMap<String, String>();
		if(StringUtils.isNotBlank(entNm)) {
			errors.put("entNm", "회사명 입력");
		}
		if(StringUtils.isNotBlank(accountId)) {
			errors.put("accuntId", "아이디 입력");
		}
		
		// 에러발생
		if(errors.size() > 0) {
			model.addAttribute("errors", errors);
			model.addAttribute("map", map);
			System.out.println("dpfdpdpfpdpdfjdj");
			goPage = "conn/registerForm";
		}else {
			// 정상데이터
			ServiceResult result = entAccountService.signup(req, map);
			if(result.equals(ServiceResult.OK)) { // 가입 성공
				log.info("!!!!!!!!!!!!!!    " + accountVo);
				ra.addFlashAttribute("message", "회원가입 완료");
				goPage = "redirect:/main/loginForm.do";
			}else {	// 가입하기 실패
				model.addAttribute("message", "서버에러, 재시도!");
				model.addAttribute("map", map);
				goPage = "conn/registerForm";
			}
		}
		
		return goPage;
		
	}

	// 로그인
	@RequestMapping(value = "/signin.do", method = RequestMethod.POST)
	public String memberSignin() {
		return "";
	}

	// 아이디찾기
	@RequestMapping(value = "/searchId.do", method = RequestMethod.POST)
	public ResponseEntity<AccountVO> memberSearchId(@RequestBody AccountVO accountVO,
			Model model) {
		
		AccountVO account = entAccountService.searchId(accountVO);
		log.info("!!!!  " + account);
		
		return new ResponseEntity<AccountVO>(account, HttpStatus.OK);
	}

	// 비밀번호 찾기
	@RequestMapping(value = "/searchPw.do", method = RequestMethod.POST)
	public ResponseEntity<AccountVO> memberSearchPw(@RequestBody AccountVO accountVO,
			Model model) {
		
		
		
		
		return null;
	}
}
