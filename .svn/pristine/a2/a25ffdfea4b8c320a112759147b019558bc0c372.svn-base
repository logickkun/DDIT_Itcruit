package kr.co.itcruit.mypage.enterprise.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.co.itcruit.ServiceResult;
import kr.co.itcruit.atch.service.IAtchFileService;
import kr.co.itcruit.common.CommoncodeService;
import kr.co.itcruit.mypage.enterprise.service.IMyEnterpriseService;
import kr.co.itcruit.vo.AccountVO;
import kr.co.itcruit.vo.ApplyProcessListVO;
import kr.co.itcruit.vo.AtchFileVO;
import kr.co.itcruit.vo.CommoncodeVO;
import kr.co.itcruit.vo.CustomPaginationInfoVO;
import kr.co.itcruit.vo.EntIntroQSTNDSNCTVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("myPage/enterprise")
@Slf4j
public class EnterpriseAJAXController {
	
	@Autowired
	private CommoncodeService ccService;
	
	@Autowired
	private IAtchFileService atchFileService;
	
	@Autowired
	private IMyEnterpriseService myEntService;
	
	
	@RequestMapping(value = "/esntLangList")
	public ResponseEntity<List<CommoncodeVO>> esntlLangList(@RequestParam("pstnCmmncdNm") String pstnCmmncdNm){
		
//		log.info("################모집분야 : "+ pstnCmmncdNm);
		
		String cmmncode = "PSTN%";
		
		List<CommoncodeVO> esntlLangList = ccService.commoncodeList(cmmncode, pstnCmmncdNm);
		
//		log.info("################모집분야리스트 : "+esntlLangList);
		
		return new ResponseEntity<List<CommoncodeVO>>(esntlLangList, HttpStatus.OK);
		
	}
	
	@RequestMapping(value = "/getRecruitImage", method = RequestMethod.GET)
	public ResponseEntity<byte[]> sendImage(@RequestParam("recruitNo") String recruitNo){
		
		log.info("#################### recruitNo : "+recruitNo);
		
		String orgnCmmncd = "채용공고";
		AtchFileVO afv = atchFileService.getFileInfo(recruitNo, orgnCmmncd);
		
		String filePath = afv.getFilePath();
		
		File file = new File(filePath);
		
		byte[] imegeByte = null;
		try {
			imegeByte = Files.readAllBytes(file.toPath());
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return new ResponseEntity<byte[]>(imegeByte, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/qstnDSNCTInsert", method = RequestMethod.GET)
	public ResponseEntity<String> qstnDSNCTInsert(
			
			@RequestParam("entIntroQstnNo") int entIntroQstnNo, 
			@RequestParam("entIntroQstnInsertCn") String entIntroQstnInsertCn
			)
	{
		
		log.info("######################## entIntroQstnNo : " + entIntroQstnNo );
		log.info("######################## entIntroQstnInsertCn : " + entIntroQstnInsertCn );
		
		ServiceResult result = myEntService.qstnDSNCTInsert(entIntroQstnNo, entIntroQstnInsertCn);
		if(result.equals(ServiceResult.OK)) {
			
			return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
			
		}else {
			
			return new ResponseEntity<String>("FAILURE", HttpStatus.OK);
			
		}
		
	}
	
	
	@RequestMapping(value = "/qstnDSNCTUpdate", method= RequestMethod.GET)
	public ResponseEntity<String> qstnDSNCTUpdate(
			
			@RequestParam("entIntroQstnSeqNo") int entIntroQstnSeqNo,
			@RequestParam("entIntroQstnUpdateCn") String entIntroQstnUpdateCn)
	
	{
		
//		log.info("######################## entIntroQstnSeqNo : " + entIntroQstnSeqNo );
//		log.info("######################## entIntroQstnCn : " + entIntroQstnUpdateCn );
		
		
		ServiceResult result = myEntService.qstnDSNCTUpdate(entIntroQstnSeqNo, entIntroQstnUpdateCn);
		
		if(result.equals(ServiceResult.OK)) {
			
			return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
			
		}else {
			
			return new ResponseEntity<String>("FAILURE", HttpStatus.OK);
			
		}
	}
	
	@RequestMapping(value = "/getApplyProcessList", method = RequestMethod.GET)
	public ResponseEntity<List<ApplyProcessListVO>> applyProcessList(@RequestParam("recruitNo")String recruitNo, @RequestParam("pstnCmmncdNm")String pstnCmmncdNm){
		
//		log.info("##################### recruitNo : " + recruitNo);
//		log.info("##################### pstnCmmncdNm : " + pstnCmmncdNm);
		
		List<ApplyProcessListVO> selectApplyProcessList = myEntService.selectApplyProcessList(recruitNo, pstnCmmncdNm);
		
		return new ResponseEntity<List<ApplyProcessListVO>>(selectApplyProcessList, HttpStatus.OK);
	}
	
	
	@RequestMapping(value = "/getOrderList", method = RequestMethod.GET)
	public ResponseEntity<CustomPaginationInfoVO<AccountVO>> orderList(
			
			@RequestParam("recruitNo")String recruitNo,
			@RequestParam("pstnCmmncdNm")String pstnCmmncdNm,
			@RequestParam("orderNumber")int orderNumber,
			@RequestParam(name="page", required = false, defaultValue ="1") int currentPage,
			@RequestParam(required = false, defaultValue = "defaultSort") String searchType,
			@RequestParam(required = false) String searchWord
			
			){
		
		log.info("############################## recruitNo : " + recruitNo);
		log.info("############################## pstnCmmcndNm : " + pstnCmmncdNm);
		
		
		CustomPaginationInfoVO<AccountVO> accountList = new CustomPaginationInfoVO<AccountVO>();
		accountList.setCurrentPage(currentPage);	
		accountList.setOrderNumber(orderNumber);
		accountList.setRecruitNo(recruitNo);
		accountList.setPstnCmmncdNm(pstnCmmncdNm);
		
		int totalRecord = myEntService.selecetAccountListCount(accountList);
		accountList.setTotalRecord(totalRecord);
		
		List<AccountVO> dataList = myEntService.selectOrderList(accountList);
		accountList.setDataList(dataList);
		
		
		return new ResponseEntity<CustomPaginationInfoVO<AccountVO>>(accountList, HttpStatus.OK);
	}
	
	
	
	@RequestMapping(value = "/getQstnDSNCTList", method = RequestMethod.GET)
	public ResponseEntity<List<EntIntroQSTNDSNCTVO>> getQstnDSNCTList(
			@RequestParam("recruitNo") String recruitNo,
			@RequestParam("pstnCmmncdNm") String pstnCmmncdNm,
			@RequestParam("orderNumber") String orderNumber
			
			) {
		
		log.info("############################## recruitNo : " + recruitNo);
		log.info("############################## pstnCmmcndNm : " + pstnCmmncdNm);
		
		List<EntIntroQSTNDSNCTVO>  eiqdList = null;
		
		if(StringUtils.isNotBlank(recruitNo) && StringUtils.isNotBlank(pstnCmmncdNm)) {
			
			eiqdList = myEntService.selectOrderDsnct(recruitNo, pstnCmmncdNm, orderNumber);
			return new ResponseEntity<List<EntIntroQSTNDSNCTVO>>(eiqdList, HttpStatus.OK);
			
		}else {
			
			return new ResponseEntity<List<EntIntroQSTNDSNCTVO>>(eiqdList, HttpStatus.OK);
			
		}
		
	}
	
	
	@RequestMapping(value = "/deleteQTSNDSNCT", method = RequestMethod.GET)
	public ResponseEntity<String> deleteQTSNDSNCT(@RequestParam("entIntroQstnSeqNo") int entIntroQstnSeqNo){
		
		log.info("######################## entIntroQstnSeqNo : " + entIntroQstnSeqNo );
		
		ServiceResult result = myEntService.qstnDSNCTDelete(entIntroQstnSeqNo);
		
		
		if(result.equals(ServiceResult.OK)) {
			
			return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
			
		}else {
			
			return new ResponseEntity<String>("FAILURE", HttpStatus.OK);
			
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@ResponseBody
	@RequestMapping(value = "/idCheck.do" , method = RequestMethod.POST)
	public ResponseEntity<ServiceResult> idCheck(@RequestParam("id") String id){
		
		log.info(id);
		ServiceResult result = myEntService.idCheck(id);
		
		if(result.equals(ServiceResult.EXIST)) {
			return new ResponseEntity<ServiceResult>(result,HttpStatus.OK);
		}else {
			return new ResponseEntity<ServiceResult>(result,HttpStatus.OK);
		}
	}
	
	
	@ResponseBody
	@RequestMapping(value = "/countId.do" , method = RequestMethod.POST)
	public ResponseEntity<Integer> countId(@RequestParam("entNo") int entNo){
		
		int count = myEntService.countId(entNo);
		
		
		
		return new ResponseEntity<Integer>(count,HttpStatus.OK);
		
	}
	
	
	@ResponseBody
	@RequestMapping(value = "/deleteId.do" , method = RequestMethod.POST)
	public ResponseEntity<ServiceResult> deleteId(@RequestParam("accountId") String accountId ){
		
		ServiceResult result = myEntService.deleteId(accountId);
		
		log.info(result + "<<<<<<<<<<<<<<<<<");
		
		if(result.equals(ServiceResult.OK)) {
			return new ResponseEntity<ServiceResult>(result,HttpStatus.OK);
		}else {
			return new ResponseEntity<ServiceResult>(result,HttpStatus.FAILED_DEPENDENCY);
		}
		
	}
	
	
	
	
	
	@RequestMapping(value = "/getQstnAnswer", method = RequestMethod.POST)
	public ResponseEntity<List<Map<String, String>>> getQstnAnswer(@RequestBody Map<String, String> qstnAnswer){
		
		log.info("######### qstnAnswer : " + qstnAnswer);
		
		List<Map<String, String>> answer = myEntService.getQstnAnswer(qstnAnswer);
		
		log.info("######## answer :" + answer);
		
		return new ResponseEntity<List<Map<String, String>>>(answer, HttpStatus.OK);
		
	} 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
