package kr.co.itcruit.account.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.co.itcruit.ServiceResult;
import kr.co.itcruit.account.service.IEnterpriseAccountService;
import kr.co.itcruit.account.service.IMemberAccountService;
import kr.co.itcruit.vo.AccountVO;
import kr.co.itcruit.vo.CustomUser;
import kr.co.itcruit.vo.EnterpriseVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/account/enterprise")
@Slf4j
public class EnterpriseAccountController {

	@Inject
	private IEnterpriseAccountService entAccountService;
	
	// 회원가입
	@RequestMapping(value = "/signup.do", method = RequestMethod.POST)
	public String memberSignup(HttpServletRequest req, Model model, 
			AccountVO accountVo, EnterpriseVO enterpriseVO, RedirectAttributes ra, 
			@RequestParam("entLogoImg") MultipartFile entLogoImg) {
		
		
		
		log.info("##########" + enterpriseVO.getBrnoFile());
//		log.info("##########" + enterpriseVO);
//		log.info("##########" + entLogoImg);
		
		
		try {
			byte[] castFile = entLogoImg.getBytes();
			
			enterpriseVO.setEntImg(castFile);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
//		log.info("##########" + enterpriseVO);
		
		
		
//		System.out.println("!!!!!!!!!!!!!!!" + accountVo);
//		System.out.println("!!!!!!!!!!!!!!!" + enterpriseVO);
		enterpriseVO.setLoginId(accountVo.getAccountId());
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("accountVO", accountVo);
		map.put("enterpriseVO", enterpriseVO);
		
		
		
		System.out.println("AccountVOAccountVOAccountVO " + map.get("accountVO"));
		System.out.println("EnterpriseVOEnterpriseVOEnterpriseVO " + map.get("enterpriseVO"));
		
		String entNm = (String) map.get(enterpriseVO.getEntNm());
		String accountId = (String) map.get(accountVo.getAccountId());
		
		
		String goPage = "";
		
		Map<String, String> errors = new HashMap<String, String>();
		if(StringUtils.isNotBlank(entNm)) {
			errors.put("entNm", "회사명 입력");
		}
		if(StringUtils.isNotBlank(accountId)) {
			errors.put("accuntId", "아이디 입력");
		}
		
		// 에러발생
		if(errors.size() > 0) {
			model.addAttribute("errors", errors);
			model.addAttribute("map", map);
			System.out.println("dpfdpdpfpdpdfjdj");
			goPage = "conn/registerForm";
		}else {
			// 정상데이터
			ServiceResult result = entAccountService.signup(req, map);
			if(result.equals(ServiceResult.OK)) { // 가입 성공
				log.info("!!!!!!!!!!!!!!    " + accountVo);
				ra.addFlashAttribute("message", "회원가입 완료");
				goPage = "redirect:/main/loginForm.do";
			}else {	// 가입하기 실패
				model.addAttribute("message", "서버에러, 재시도!");
				model.addAttribute("map", map);
				goPage = "conn/registerForm";
			}
		}
		
		return goPage;
		
	}

	// 로그인 
	@RequestMapping(value = "/signin.do")
	public String memberSignin(HttpSession session, AccountVO accountVO,
			Model model, RedirectAttributes ra) {
		
		String goPage = "";
//		Map<String, String> errors = new HashMap<String, String>();
//		if(StringUtils.isBlank(accountVO.getAccountId())) {
//			errors.put("accuntNm", "아이디 입력");
//		}
//		if(StringUtils.isBlank(accountVO.getAccountPswd())) {
//			errors.put("accuntPswd", "비밀번호 입력");
//		}
//		
//		if(errors.size() > 0) {
//			log.info("에얼에러에러");
//			model.addAttribute("errors", errors);
//			model.addAttribute("account", accountVO);
//			goPage = "conn/loginForm";
//		}else {
			
			////ra.flashRedirect("msg", 기업으로 로그인하세요)
//			AccountVO account = entAccountService.enterpriseSignin(accountVO);
			CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			log.info("기업user {} ", user);
			
			AccountVO account = user.getAccount();
			log.info("기업account {} ", account);
			
			if(account != null) {
				String auth = account.getAuthCmmncd();
				if(auth.equals("AUTH103")) {
					log.info("성공성공ㄱ");
					session.setAttribute("SessionInfo", account);
					goPage = "redirect:/main/index";
				}else {
					model.addAttribute("message", "기업회원로그인창입니다.");
					goPage = "conn/loginForm";
				}
			}else {
				log.info("시랲밋맬피ㅐ시래");
				model.addAttribute("message", "로그인 실패, 재입력");
				model.addAttribute("account", account);
				goPage = "conn/loginForm";
			}
			
//		}
		
		return goPage;
	}

	// 아이디찾기
	@RequestMapping(value = "/searchId.do", method = RequestMethod.POST)
	public ResponseEntity<AccountVO> memberSearchId(@RequestBody AccountVO accountVO,
			Model model) {
		
		AccountVO account = entAccountService.searchId(accountVO);
		log.info("!!!!  " + account);
		
		return new ResponseEntity<AccountVO>(account, HttpStatus.OK);
	}

	// 비밀번호 찾기
	@RequestMapping(value = "/searchPw.do", method = RequestMethod.POST)
	public ResponseEntity<AccountVO> memberSearchPw(@RequestBody AccountVO accountVO,
			Model model) {
		
		AccountVO account = entAccountService.searchPw(accountVO);
		log.info("!!!!  " + account);
		
		return new ResponseEntity<AccountVO>(account, HttpStatus.OK);
	}
}
