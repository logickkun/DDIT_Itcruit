package kr.co.itcruit.codingtest.controller;

import java.net.URI;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.co.itcruit.codingtest.service.ICodingTestService;
import kr.co.itcruit.vo.AccountVO;
import kr.co.itcruit.vo.CodingtestBoardVO;
import kr.co.itcruit.vo.CodingtestVO;
import kr.co.itcruit.vo.CustomPaginationInfoVO;
import kr.co.itcruit.vo.CustomUser;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/codingtest")
@Slf4j
public class CodingTestController {

	@Inject
	private ICodingTestService codingtestService;
	/**
	 * 코딩테스트 리스트페이지로 이동
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/list.do")
	public String getTestList(
			Model model,
			@RequestParam(required = false) String pastQstnCtgryNm,
			@RequestParam(required = false) String qstnSubject,
			@RequestBody(required = false) CodingtestVO codeVO,
			HttpSession session
			) {
		
		CustomPaginationInfoVO<CodingtestVO> customPagingVO =
				new CustomPaginationInfoVO<CodingtestVO>();
		
		log.info(">>>>>>>>>>>>>>>>>>>>" + pastQstnCtgryNm);
		log.info(">>>>>>>>>>>>>>>>>>>>" + qstnSubject);
		if(codeVO == null) {
			codeVO = new CodingtestVO();
		} 
//		
		if(pastQstnCtgryNm != null && !pastQstnCtgryNm.isEmpty()) {
			model.addAttribute("pastQstnCtgryNm", pastQstnCtgryNm);
			codeVO.setPastQstnCtgryNm(pastQstnCtgryNm);
		} 
//		
		if(qstnSubject != null && !qstnSubject.isEmpty()) {
			model.addAttribute("qstnSubject", qstnSubject);
			codeVO.setQstnSubject(qstnSubject);
		}
		String accountId = "";
		
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();		
		if(principal instanceof CustomUser) {
			//로그인 된 상태면
			CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();		
			accountId =  user.getAccount().getAccountId();
		} else {
			accountId = "";
		}

		log.info("accountId>>>>>>>>>>>>>>" + accountId);
		
		AccountVO accoutVO = null;
		if(accountId != null && !accountId.equals("")) {
			accoutVO = codingtestService.getMyCodePower(accountId);
		}
		
		codeVO.setAccountId(accountId);
		
		List<CodingtestVO> codeList = codingtestService.selectList(codeVO);
		
		
		CodingtestVO codingtestVO = codingtestService.getOptionInfo();
		
		log.info(">>>>>>\n"+codingtestVO); //유형 및 기출문제 목록
		
		model.addAttribute("codingtestVO", codingtestVO);
		model.addAttribute("codeList", codeList);
		model.addAttribute("accoutVO", accoutVO);
		return "main/testList";		
	}
	
	@RequestMapping(value="/list.do", method=RequestMethod.POST)
	public ResponseEntity<List<CodingtestVO>> getTestListByVO(
			@RequestBody(required = false) CodingtestVO codeVO
			) {
		
//		HttpSession session = req.getSession();
//		AccountVO account = (AccountVO) session.getAttribute("SessionInfo");
		
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();		
		if(principal instanceof CustomUser) {
			//로그인 된 상태면
			CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();		
			AccountVO accountVO = user.getAccount();
		    codeVO.setAccountId(accountVO.getAccountId());
		} 
//		else {
//			HttpHeaders headers = new HttpHeaders();
//		    headers.setLocation(URI.create("/main/loginForm.do"));
//		    return new ResponseEntity<>(headers, HttpStatus.SEE_OTHER);
//		}
//		CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//		if(user != null) {
//			AccountVO accountVO = user.getAccount();
//		    codeVO.setAccountId(accountVO.getAccountId());
//		} else {
//			codeVO.setAccountId("");
//		}

		log.info(">>>>>>>>>>>>>> 여기오긴하나???? \n"+codeVO);
		//new 최신순
		//high 정답높은
		//low 정답낮은
		log.info("daasdasasdasdasd");

//		CustomPaginationInfoVO<CodingtestVO> customPagingVO =
//				new CustomPaginationInfoVO<CodingtestVO>();
		
		
		List<CodingtestVO> codeList = codingtestService.selectList(codeVO);
		log.info("getTestListByVO >>>>>>>>>>>>\n"+codeVO);
	
		log.info("codingtestController>>>>>>>>>>>>" + codeList);
		
		return new ResponseEntity<List<CodingtestVO>>(codeList, HttpStatus.OK);		
	
	}
	
	
	//@RequestBody (required = false) CodingtestVO codingtestVO
	/**
	 * 코딩테스트 문제페이지로 이동
	 * @param model
	 * @param qstnNo
	 * @return
	 */
	@RequestMapping(value="/detail.do", method=RequestMethod.GET)
	public String getTestDetailByQstnNo(
			Model model,
			@RequestParam int qstnNo
			) {
		log.info("getTestDetailByQstnNo >>>>>" + qstnNo);
		
		CodingtestVO codingtestVO = codingtestService.getQstnByNo(qstnNo);
		model.addAttribute("codingtestVO", codingtestVO);
		
		log.info("getTestDetailByQstnNo>>>>>>>>>>>>" + codingtestVO);
		
		return "codingtest/detail";			
	}
	
	/**
	 * @param codingtestVO
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/solve.do", method=RequestMethod.POST, produces = "text/plain;charset=UTF-8")
	public ResponseEntity<String> solve(
			@RequestBody CodingtestVO codingtestVO
			) {
		
		String accountId = "";
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();		
		if(principal instanceof CustomUser) {
			//로그인 된 상태면
			CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();		
			accountId =  user.getAccount().getAccountId();
		} else {
			
		}
	
		//DynamicCompileUtils dynamic = new DynamicCompileUtils();
		
//		추후 세션에서 아이디 받아올 것
		if(codingtestVO.isFlag()) {
			log.info("제출 옴???????????????????" + codingtestVO.getCode());
		} else {
			log.info("테스트 옴???????????????????" + codingtestVO.isFlag());
		}
		
		log.info("CodingtestController.solve >>>>>>>>>>>>>>>>>>>" + codingtestVO);
		
		codingtestVO.setAccountId(accountId);
        String result = codingtestService.doCompile(codingtestVO);
		
        
        log.info(result);
        return new ResponseEntity<String>(result, HttpStatus.OK);
    }
	
	// /codingtest/question
	@RequestMapping(value="/question.do", method=RequestMethod.POST)
	public String goQuestionBoard(
			Model model,
			CodingtestVO codingtestVO
			) {
		String goPage ="";
		if(codingtestVO == null) {
			return "redirect:/codingtest/list.do";
		}
		int qstnNo = codingtestVO.getQstnNo();
		log.info("goQuestionBoard>>>>>>>>>>>>>>>" + qstnNo);
		//codeBoardList
		List<CodingtestBoardVO> codeBoard = codingtestService.getCodeBoardByQstnNo(qstnNo);
		
		log.info("goQuestionBoard>>>>>>>>>>>>>" + codeBoard);
//		log.info(">>>>>>>>>>>>>>>>" + qstnNo);
//		model.addAttribute("qstnNo", qstnNo);
		goPage = "codingtest/questionList";	
		return goPage;
	}

}
