package kr.co.itcruit.main.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.co.itcruit.main.service.IRecruitListService;
import kr.co.itcruit.recruit.service.IRecruitService;
import kr.co.itcruit.vo.AccountVO;
import kr.co.itcruit.vo.PaginationInfoVO;
import kr.co.itcruit.vo.RecruitVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/main")
public class MainController {
	//메인페이지에서 배보여질 배너와 채용정보카드 리스트들 
	//해당 카드를 눌렀을 때 창 띄우기
	//로그인버튼 눌렀을 때 로그인 페이지로 이동
	//배너 눌렀을 때 또한 카드 눌렀을 때 처럼 이벤트(해당 기업 채용정보페이지 띄우기 같은)
	//카드나 배너 3~5회 클릭 이벤트 발생 후 로그인페이지 유도
	//비회원일 경우 회원가입 유도
	//헤더에 있는 버튼 클릭시 이동할 페이지 설정 -기능구현x(페이지 주소나 매핑 주소만)
	//특정이벤트의 경우 반드시 권한이 필요하기 때문에 권한 체크후 이벤트 발생
	
	@Inject
	private IRecruitListService recruitService;
	
	@Inject
	private IRecruitService recruitSer;
	
	
	
//	@PreAuthorize("hasAnyRole('AUTH102', 'AUTH103')")
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public String index(Model model, RecruitVO recruitVO, HttpServletRequest req) {
		log.info("reqreq = {}", req);
		
		
		// 메인화면 채용공고 20개씩 페이징처리해서 무한스크롤 하려고함
		PaginationInfoVO<RecruitVO> pagingVO = new PaginationInfoVO<RecruitVO>(20,5);
		pagingVO.setCurrentPage(1);
		
		
		List<RecruitVO> initRecruitList = recruitSer.selectInitRecruitList(pagingVO);
		model.addAttribute("initRecruitList", initRecruitList);
		
		return "main/main";
	}
	
	
	// 로그인 폼
	@RequestMapping(value = "/loginForm.do", method = RequestMethod.GET)
	public String loginForm() {
		return "conn/loginForm";
	}
	
	// 회원가입 폼
	@RequestMapping(value = "/registerForm.do", method = RequestMethod.GET)
	public String registerForm() {
		return "conn/registerForm";
	}
	
	// 아이디/비밀번호찾기 폼
	@RequestMapping(value = "/idpwfindForm.do", method = RequestMethod.GET)
	public String idpwfindForm() {
		return "conn/idpwFind";
	}
	
	// 관리자로그인 폼
	@RequestMapping(value = "/adminLoginForm.do", method = RequestMethod.GET)
	public String adminLoginForm() {
		return "conn/adminLoginForm";
	}
	
	// 채용정보 상세페이지
	@RequestMapping(value = "/recuritInfo.do", method = RequestMethod.GET)
	public String recuritInfo() {
		return "conn/recuritInfo";
	}
	
	// 자소서 폼(채용공고 신청했을때)
	@RequestMapping(value = "/introForm.do", method = RequestMethod.GET)
	public String introForm() {
		return "conn/introForm";
	}
	
	
	// 채용상세
	@PreAuthorize("hasAnyRole('ROLE_AUTH104', 'ROLE_AUTH103')")
	@GetMapping("/recruitDetail.do")
	public String recruitDetail(String recruitNo, Model model, 
			HttpSession session, HttpServletRequest req) {
		
//		log.info("recruitNo : {}", recruitNo);
		String goPage = "";
//		
//		  Cookie[] cookies = req.getCookies();
//	      String userCookie = "";
//	        if (cookies != null) {
//	            // 쿠키 배열을 순회하며 JSESSIONID 쿠키를 찾음
//	            for (Cookie cookie : cookies) {
//	                if (cookie.getName().equals("JSESSIONID")) {
//	                    userCookie = cookie.getValue();
//	                    // JSESSIONID를 사용하여 원하는 작업 수행
//	                    log.info("JSESSIONID: " + userCookie);
//	                    // 필요한 경우 JSESSIONID를 사용하여 추가 작업 수행
//	                }
//	            }
//	        } else {
//	            // 쿠키가 존재하지 않는 경우에 대한 처리
//	            log.info("쿠키가 존재하지 않습니다.");
//	        }
//		
//	    int count = 0;
		AccountVO accountVO = (AccountVO) session.getAttribute("SessionInfo");
		
		log.info("정보 : {}", accountVO);
		
		// 비회원
		if(accountVO == null) {
			RecruitVO recruitVO = recruitSer.recruitDetail(recruitNo);
			model.addAttribute("recruit", recruitVO);
			log.info("비회원 채용디테일");
			goPage = "conn/recruitInfo";
		}else {
			
			if(StringUtils.isBlank(accountVO.getAccountId())) {
//			model.addAttribute("userCookie", userCookie);
//			count++;
				model.addAttribute("message", "로그인 후 이용해주세요.");
				goPage = "conn/loginForm";
			}else {
				RecruitVO recruitVO = recruitSer.recruitDetail(recruitNo);
				recruitVO.setAccountId(accountVO.getAccountId());
				model.addAttribute("recruit", recruitVO);
				log.info("회원 채용디테일");
				goPage = "conn/recruitInfo";
			}
			
		}
		
		
		return goPage;
	}
	
	

}
